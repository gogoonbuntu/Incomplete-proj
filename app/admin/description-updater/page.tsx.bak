"use client"

import { useState, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert"
import { AlertCircle, CheckCircle, Play, Square, RefreshCw, Trash2 } from "lucide-react"
import { useAuth } from "@/hooks/use-auth"
import { useRouter } from "next/navigation"

export default function DescriptionUpdaterPage() {
  const [status, setStatus] = useState<"idle" | "running" | "error">("idle")
  const [message, setMessage] = useState<string>("")
  const [lastRun, setLastRun] = useState<string | null>(null)
  const [isAdmin, setIsAdmin] = useState(false)
  const [isRefreshing, setIsRefreshing] = useState(false)
  const [isCacheClearing, setIsCacheClearing] = useState(false)
  const { user } = useAuth()
  const router = useRouter()

  useEffect(() => {
    // 관리자 권한 확인
    const checkAdmin = async () => {
      if (!user) {
        router.push("/login?redirect=/admin/description-updater")
        return
      }

      try {
        const response = await fetch(`/api/admin/check?uid=${user.uid}`)
        const data = await response.json()
        setIsAdmin(data.isAdmin)
        
        if (!data.isAdmin) {
          router.push("/")
        }
      } catch (error) {
        console.error("관리자 권한 확인 실패:", error)
        router.push("/")
      }
    }

    checkAdmin()
  }, [user, router])

  useEffect(() => {
    if (isAdmin) {
      checkServiceStatus()
      // 10초마다 상태 업데이트
      const interval = setInterval(checkServiceStatus, 10000)
      return () => clearInterval(interval)
    }
  }, [isAdmin])

  const startService = async () => {
    try {
      setMessage("서비스를 시작하는 중...")
      const response = await fetch("/api/admin/description-updater/start", {
        method: "POST",
      })
      const data = await response.json()
      
      if (data.success) {
        setStatus("running")
        setMessage("서비스가 성공적으로 시작되었습니다.")
      } else {
        setStatus("error")
        setMessage(`서비스 시작 실패: ${data.message}`)
      }
    } catch (error) {
      console.error("서비스 시작 실패:", error)
      setStatus("error")
      setMessage("서비스 시작 중 오류가 발생했습니다.")
    }
  }

  const stopService = async () => {
    try {
      setMessage("서비스를 중지하는 중...")
      const response = await fetch("/api/admin/description-updater/stop", {
        method: "POST",
      })
      const data = await response.json()
      
      if (data.success) {
        setStatus("idle")
        setMessage("서비스가 성공적으로 중지되었습니다.")
      } else {
        setStatus("error")
        setMessage(`서비스 중지 실패: ${data.message}`)
      }
    } catch (error) {
      console.error("서비스 중지 실패:", error)
      setStatus("error")
      setMessage("서비스 중지 중 오류가 발생했습니다.")
    }
  }

  const refreshPage = () => {
    setIsRefreshing(true)
    router.refresh()
    
    // 상태 다시 가져오기
    setTimeout(() => {
      checkServiceStatus()
      setIsRefreshing(false)
    }, 1000)
  }

  }

  const clearServerCache = async () => {
    setIsCacheClearing(true)
    
    try {
      // 서버 API를 통해 서버 캐시 삭제
      const response = await fetch('/api/admin/description-updater/clear-cache', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          uid: user?.uid || ''
        })
      })
      
      const result = await response.json()
      
      if (result.success) {
        setMessage("서버 캐시가 성공적으로 삭제되었습니다.")
        // 상태 다시 가져오기
        setTimeout(() => {
          checkServiceStatus()
        }, 1000)
      } else {
        throw new Error(result.message || '서버 캐시 삭제 실패')
      }
    } catch (error) {
      console.error("서버 캐시 삭제 실패:", error)
      setMessage("서버 캐시 삭제 중 오류가 발생했습니다.")
    } finally {
      setIsCacheClearing(false)
    }
  }

  // 모든 캐시 삭제 기능 제거 - 서버 캐시만 사용

  const checkServiceStatus = async () => {
    try {
      const response = await fetch("/api/admin/description-updater/status")
      const data = await response.json()
      
      setStatus(data.isRunning ? "running" : "idle")
      setMessage(data.message || "")
      setLastRun(data.lastRun || null)
    } catch (error) {
      console.error("서비스 상태 확인 실패:", error)
      setStatus("error")
      setMessage("서비스 상태 확인 중 오류가 발생했습니다.")
    }
  }

  if (!isAdmin) {
    return (
      <div className="container mx-auto py-10">
        <Alert variant="destructive">
          <AlertCircle className="h-4 w-4" />
          <AlertTitle>접근 권한 없음</AlertTitle>
          <AlertDescription>
            이 페이지에 접근할 권한이 없습니다.
          </AlertDescription>
        </Alert>
      </div>
    )
  }

  return (
    <div className="container mx-auto py-10">
      <h1 className="text-3xl font-bold mb-6">프로젝트 설명 자동 업데이트 관리</h1>
      
      <Card className="mb-6">
        <CardHeader>
          <CardTitle className="flex items-center justify-between">
            서비스 상태
            <Badge 
              variant={status === "running" ? "default" : status === "error" ? "destructive" : "outline"}
            >
              {status === "running" ? "실행 중" : status === "error" ? "오류" : "대기 중"}
            </Badge>
          </CardTitle>
          <CardDescription>
            프로젝트 설명 자동 업데이트 서비스의 현재 상태입니다.
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            <div>
              <p className="text-sm font-medium">상태 메시지:</p>
              <p className="text-sm text-muted-foreground">{message || "정보 없음"}</p>
            </div>
            
            {lastRun && (
              <div>
                <p className="text-sm font-medium">마지막 실행 시간:</p>
                <p className="text-sm text-muted-foreground">
                  {new Date(lastRun).toLocaleString()}
            >
              <RefreshCw className={`mr-2 h-4 w-4 ${isRefreshing ? 'animate-spin' : ''}`} /> 
              {isRefreshing ? '새로고침 중...' : '새로고침'}
            </Button>
            
            <Button 
              onClick={clearLocalCache} 
              variant="outline" 
              disabled={isCacheClearing}
            >
              <Trash2 className="mr-2 h-4 w-4" /> 
              {isCacheClearing ? '캐시 삭제 중...' : '로컬 캐시 삭제'}
            </Button>
            
            <Button 
              onClick={clearServerCache} 
              variant="outline" 
              disabled={isCacheClearing}
            >
              <Trash2 className="mr-2 h-4 w-4" /> 
              {isCacheClearing ? '캐시 삭제 중...' : '서버 캐시 삭제'}
            </Button>
            
            <Button 
              onClick={clearAllCache} 
              variant="outline" 
              disabled={isCacheClearing}
            >
              <Trash2 className="mr-2 h-4 w-4" /> 
              {isCacheClearing ? '캐시 삭제 중...' : '모든 캐시 삭제'}
            </Button>
          </div>
        </CardFooter>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>서비스 정보</CardTitle>
          <CardDescription>
            프로젝트 설명 자동 업데이트 서비스에 대한 정보입니다.
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            <Alert>
              <CheckCircle className="h-4 w-4" />
              <AlertTitle>자동 업데이트 서비스</AlertTitle>
              <AlertDescription>
                이 서비스는 기존 DB에 있는 프로젝트 설명을 Gemini API를 사용하여 자동으로 한국어와 영어로 업데이트합니다.
                API 키 사용량 제한을 고려하여 주기적으로 업데이트되지 않은 프로젝트를 하나씩 처리합니다.
              </AlertDescription>
            </Alert>
            
            <div>
              <h3 className="text-lg font-medium">주요 기능</h3>
              <ul className="list-disc pl-5 space-y-1 mt-2">
                <li>기존 DB에 있는 프로젝트 설명을 AI를 사용해 업데이트</li>
                <li>업데이트 여부를 확인하고 아직 업데이트되지 않은 프로젝트만 처리</li>
                <li>타국어로 된 설명도 한국어와 영어 버전으로 번역</li>
                <li>API 요청 제한을 고려하여 천천히 주기적으로 처리</li>
              </ul>
            </div>
            
            <div>
              <h3 className="text-lg font-medium">실행 주기</h3>
              <p className="text-sm text-muted-foreground mt-2">
                서비스는 5분 간격으로 실행되며, 한 번에 하나의 프로젝트만 처리합니다.
                이는 API 사용량 제한을 고려한 설정입니다.
              </p>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  )
}
